#!/bin/ksh
#
#  Script to run the NEMO rebuild tool to rebuild NEMO
#  diagnostic or restart files.
#
#  The scripts creates the nam_rebuild namelist based upon
#  the command line options you give it (see usage below)
#
#  Ed Blockley, September 2011
#  P.G. Fogli, CMCC, Jan 2013 - Read namelist from standard input
#
#

#set -ax
usage ()
{
   echo
   echo "  NEMO Rebuild"
   echo "  ************"
   echo
   echo "  usage: ${0##*/} [-t -c -v] filebase ndomain [rebuild dimensions]"
   echo
   echo "  flags:  -t num      use num threads"
   echo "          -c num      split 4D vars into time chuncks of size num"
   echo "          -v          verbose print out"
   echo
   exit 1
}

while getopts c:t:v opt
do
  case ${opt} in
      t)
         OMP_NUM_THREADS=${OPTARG}
      ;;
      c)
         NCHUNKSIZE=${OPTARG}
      ;;
      v)
         VERBOSE=".true."
      ;;
      *)
      echo "Ignoring unknown command line option: -${opt}"
      ;;
  esac
done
shift $(expr ${OPTIND} - 1)

if [[ $# < 2 ]] ; then
   usage
fi

script_dir=$(dirname $0)

file=$1
ndomain=$2
DIM1=$3
DIM2=$4
export OMP_NUM_THREADS=${OMP_NUM_THREADS:-16}

namelist="nam_rebuild.$$"

if [[ -n ${DIM1} && -n ${DIM2} ]] ; then
   dim_str=" dims '${DIM1}','${DIM2}'"
   dims="dims='${DIM1}','${DIM2}'"
   echo ${dim_str} >> ${namelist} || exit 1
fi

echo "file ${file},  num_domains ${ndomain}, num_threads ${OMP_NUM_THREADS}${dim_str}"

cat > ${namelist} << EOC
&nam_rebuild
filebase='${file}'
ndomain=${ndomain}
EOC
if [[ -n ${dims} ]] ; then
   echo ${dims} >> ${namelist} || exit 1
fi
if [[ -n ${NCHUNKSIZE} ]] ; then
   echo " nchunksize=${NCHUNKSIZE}" >> ${namelist} || exit 1
fi
if [[ -n ${VERBOSE} ]] ; then
   echo " l_verbose=${VERBOSE}" >> ${namelist} || exit 1
fi
echo "/" >> ${namelist} || exit 1

# run the rebuild code
${script_dir}/rebuild_nemo.exe < ${namelist}
stat=$?

rm -f ${namelist}

exit ${stat}

